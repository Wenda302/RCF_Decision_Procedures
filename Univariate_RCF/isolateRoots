isolateRootsNew[polys_] := Module[{sortedRoots, sortedRootsEx, minDiff, expr, 
      widths}, expr = Or @@ (#1 == 0 & ) /@ polys; 
      sortedRoots = DeleteDuplicates[SortBy[RootReduce /@ 
          (x /. SemialgebraicComponentInstances[expr, x]), N]]; 
      widths = getWidths[sortedRoots]; (processRoots[#1[[1]], #1[[2]]] & ) /@ 
       Transpose[{sortedRoots, widths}]]
 
getWidths[xs_] := Module[{getGaps0}, 
     getGaps0[ys_] := (#1[[2]] - #1[[1]] & ) /@ 
        Transpose[{Drop[N /@ ys, -1], Drop[N /@ ys, 1]}]; 
      With[{ys = getGaps0[xs]}, Min /@ Transpose[{Append[ys, ys[[-1]]], 
          Prepend[ys, ys[[1]]]}]]]
 
xs = {{x -> -Sqrt[2]}, {x -> Root[-1 - 4*#1 + 3*#1^2 - 2*#1^3 + #1^4 & , 1, 
        0]}, {x -> 1}, {x -> Sqrt[2]}, 
     {x -> Root[-1 - 4*#1 + 3*#1^2 - 2*#1^3 + #1^4 & , 2, 0]}}
 
processRoots[root_, w_] := Module[{nr = N[root], width = w}, 
     width = If[nr < 0 && nr + w > 0, -nr, If[nr > 0 && nr - w < 0, nr, 
         width]]; If[Element[root, Rationals], {MinimalPolynomial[root], 
        ratBound[root, width]}, Module[{itv, lb, ub}, 
        itv = IsolatingInterval[root, width]; ub = getUpperDyadic[root, 
           itv[[2]]]; lb = getLowerDyadic[itv[[1]], root]; 
         {MinimalPolynomial[root], {lb, ub}}]]]
 
ratBound[r_, d_] := If[r == 0, {{0, 0}, {0, 0}}, 
     With[{n = 2^Ceiling[Log[2, 1/d]]}, {toDyadic[Floor[n*r]/n], 
       toDyadic[Ceiling[n*r]/n]}]]
 
toDyadic[x_] := If[MatchQ[x, _Integer], With[{exp = IntegerExponent[x, 2]}, 
      {x/2^exp, exp}], With[{x1 = Numerator[x], x2 = Denominator[x], 
       x3 = Log[2, Denominator[x]]}, {x1, -x3}]]
 
getUpperDyadic[x_] := If[MatchQ[x, _Integer], 
     With[{exp = IntegerExponent[x, 2]}, {x/2^exp, exp}], 
     With[{x1 = Numerator[x], x2 = Denominator[x], 
       x3 = Log[2, Denominator[x]]}, If[MatchQ[x3, _Integer], {x1, -x3}, 
       {2*x1, -(1 + Floor[N[x3]])}]]]
 
getUpperDyadic[r_, x_] := If[MatchQ[x, _Integer] || 
      (MatchQ[x, Rational[_, _]] && MatchQ[Log[2, Denominator[x]], 
        _Integer]), toDyadic[x], Module[{p = Ceiling[Log[2, 1/N[x - r]]], n}, 
      n = 2^p; {Ceiling[n*r], -p}]]
 
getLowerDyadic[x_, r_] := If[MatchQ[x, _Integer] || 
      (MatchQ[x, Rational[_, _]] && MatchQ[Log[2, Denominator[x]], 
        _Integer]), toDyadic[x], Module[{p = Ceiling[Log[2, 1/N[r - x]]], n}, 
      n = 2^p; {Floor[n*r], -p}]]
isolateRootsNew[polys_] := Module[{sortedRoots, sortedRootsEx, minDiff, expr, 
      widths}, expr = Or @@ (#1 == 0 & ) /@ polys; 
      sortedRoots = DeleteDuplicates[SortBy[RootReduce /@ 
          (x /. SemialgebraicComponentInstances[expr, x]), N]]; 
      widths = getWidths[sortedRoots]; (processRoots[#1[[1]], #1[[2]]] & ) /@ 
       Transpose[{sortedRoots, widths}]]
 
getWidths[xs_] := Module[{getGaps0}, 
     getGaps0[ys_] := (#1[[2]] - #1[[1]] & ) /@ 
        Transpose[{Drop[N /@ ys, -1], Drop[N /@ ys, 1]}]; 
      With[{ys = getGaps0[xs]}, Min /@ Transpose[{Append[ys, ys[[-1]]], 
          Prepend[ys, ys[[1]]]}]]]
 
xs = {{x -> -Sqrt[2]}, {x -> Root[-1 - 4*#1 + 3*#1^2 - 2*#1^3 + #1^4 & , 1, 
        0]}, {x -> 1}, {x -> Sqrt[2]}, 
     {x -> Root[-1 - 4*#1 + 3*#1^2 - 2*#1^3 + #1^4 & , 2, 0]}}
 
processRoots[root_, w_] := Module[{nr = N[root], width = w}, 
     width = If[nr < 0 && nr + w > 0, -nr, If[nr > 0 && nr - w < 0, nr, 
         width]]; If[Element[root, Rationals], {MinimalPolynomial[root], 
        ratBound[root, width]}, Module[{itv, lb, ub}, 
        itv = IsolatingInterval[root, width]; ub = getUpperDyadic[root, 
           itv[[2]]]; lb = getLowerDyadic[itv[[1]], root]; 
         {MinimalPolynomial[root], {lb, ub}}]]]
 
ratBound[r_, d_] := If[r == 0, {{0, 0}, {0, 0}}, 
     With[{n = 2^Ceiling[Log[2, 1/d]]}, {toDyadic[Floor[n*r]/n], 
       toDyadic[Ceiling[n*r]/n]}]]
 
toDyadic[x_] := If[MatchQ[x, _Integer], With[{exp = IntegerExponent[x, 2]}, 
      {x/2^exp, exp}], With[{x1 = Numerator[x], x2 = Denominator[x], 
       x3 = Log[2, Denominator[x]]}, {x1, -x3}]]
 
getUpperDyadic[x_] := If[MatchQ[x, _Integer], 
     With[{exp = IntegerExponent[x, 2]}, {x/2^exp, exp}], 
     With[{x1 = Numerator[x], x2 = Denominator[x], 
       x3 = Log[2, Denominator[x]]}, If[MatchQ[x3, _Integer], {x1, -x3}, 
       {2*x1, -(1 + Floor[N[x3]])}]]]
 
getUpperDyadic[r_, x_] := If[MatchQ[x, _Integer] || 
      (MatchQ[x, Rational[_, _]] && MatchQ[Log[2, Denominator[x]], 
        _Integer]), toDyadic[x], Module[{p = Ceiling[Log[2, 1/N[x - r]]], n}, 
      n = 2^p; {Ceiling[n*r], -p}]]
 
getLowerDyadic[x_, r_] := If[MatchQ[x, _Integer] || 
      (MatchQ[x, Rational[_, _]] && MatchQ[Log[2, Denominator[x]], 
        _Integer]), toDyadic[x], Module[{p = Ceiling[Log[2, 1/N[r - x]]], n}, 
      n = 2^p; {Floor[n*r], -p}]]

